def secant_method(f, a, b, nmax, epsilon):
    fa = f(a)
    fb = f(b)
    if abs(fa) > abs(fb):
        a, b = b, a
        fa, fb = fb, fa
    print(f"a = {a}, f(a) = {fa}")
    print(f"b = {b}, f(b) = {fb}")
    for n in range(2, nmax):
        if abs(fa) > abs(fb):
            a, b = b, a
            fa, fb = fb, fa
        d = (b - a) / (fb - fa)
        b = a
        fb = fa
        d = d * fa
        if abs(d) < epsilon:
            print(f"Convergence achieved after {n} iterations")
            return None
        a = a - d
        fa = f(a)
        print(f"n = {n}, a = {a}, f(a) = {fa}")

'''
Secant method theorem
If f is a function with a continuous second derivative and f'(x) != 0, then, for any initial
guess x_0 and x_1 close enough to the root, the sequence {x_n} generated by the secant method
will converge to the root superlinearly, i.e., the error at each step is approximately the square
of the error at the previous step.
'''